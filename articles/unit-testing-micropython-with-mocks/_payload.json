[{"data":1,"prerenderedAt":427},["ShallowReactive",2],{"/articles/unit-testing-micropython-with-mocks":3},{"id":4,"title":5,"body":6,"categories":406,"date":408,"description":409,"extension":410,"img":411,"meta":412,"navigation":60,"path":418,"seo":419,"stem":420,"tags":421,"__hash__":426},"content/articles/unit-testing-micropython-with-mocks.md","Unit Testing in MicroPython with Mocks",{"type":7,"value":8,"toc":403},"minimal",[9,13,18,21,25,37,155,167,239,250,365,379,384,399],[10,11,12],"p",{},"Unit testing code for embedded systems can be challenging. While it's possible\nto leverage emulators, write side-effect free code, or run tests on the\nhardware itself, it's often easiest to unit test the code on your personal\ncomputer with mocked hardware functionality.",[14,15,17],"h1",{"id":16},"mocking","Mocking",[10,19,20],{},"Mocks allow us to replace the hardware interfacing functionality under-the-hood\nwith predefined results and side-effects. For example, if there is a piece of\nlogic that retrieves values from an accelerometer to get a device's\norientation, it would be possible to mock the returned values of the\naccelerometer -- allowing us to run the unit tests on a device that does not\nhave an accelerometer sensor installed.",[14,22,24],{"id":23},"a-micropython-mocking-example","A MicroPython Mocking Example",[10,26,27,28,32,33,36],{},"In this example, we will be unit testing a module named ",[29,30,31],"code",{},"time_logger",", that\ndepends on the MicroPython library ",[29,34,35],{},"utime"," to log the most recent Epoch time to\na file.",[38,39,44],"pre",{"className":40,"code":41,"language":42,"meta":43,"style":43},"language-python shiki shiki-themes github-dark","# time_logger.py\n\nclass TimeLogger(object):\n\n    def save_time(self):\n        \"\"\" Overwrite a file with the most recent Epoch timestamp from `utime`\n        \"\"\"\n        with open(\"LAST_KNOWN_TIME\", \"w+\") as f:\n            f.write(str(utime.time()))\n","python","",[29,45,46,55,62,84,89,101,108,114,143],{"__ignoreMap":43},[47,48,51],"span",{"class":49,"line":50},"line",1,[47,52,54],{"class":53},"sAwPA","# time_logger.py\n",[47,56,58],{"class":49,"line":57},2,[47,59,61],{"emptyLinePlaceholder":60},true,"\n",[47,63,65,69,73,77,81],{"class":49,"line":64},3,[47,66,68],{"class":67},"snl16","class",[47,70,72],{"class":71},"svObZ"," TimeLogger",[47,74,76],{"class":75},"s95oV","(",[47,78,80],{"class":79},"sDLfK","object",[47,82,83],{"class":75},"):\n",[47,85,87],{"class":49,"line":86},4,[47,88,61],{"emptyLinePlaceholder":60},[47,90,92,95,98],{"class":49,"line":91},5,[47,93,94],{"class":67},"    def",[47,96,97],{"class":71}," save_time",[47,99,100],{"class":75},"(self):\n",[47,102,104],{"class":49,"line":103},6,[47,105,107],{"class":106},"sU2Wk","        \"\"\" Overwrite a file with the most recent Epoch timestamp from `utime`\n",[47,109,111],{"class":49,"line":110},7,[47,112,113],{"class":106},"        \"\"\"\n",[47,115,117,120,123,125,128,131,134,137,140],{"class":49,"line":116},8,[47,118,119],{"class":67},"        with",[47,121,122],{"class":79}," open",[47,124,76],{"class":75},[47,126,127],{"class":106},"\"LAST_KNOWN_TIME\"",[47,129,130],{"class":75},", ",[47,132,133],{"class":106},"\"w+\"",[47,135,136],{"class":75},") ",[47,138,139],{"class":67},"as",[47,141,142],{"class":75}," f:\n",[47,144,146,149,152],{"class":49,"line":145},9,[47,147,148],{"class":75},"            f.write(",[47,150,151],{"class":79},"str",[47,153,154],{"class":75},"(utime.time()))\n",[10,156,157,158,160,161,163,164,166],{},"First, because the ",[29,159,35],{}," module is not installed on the machine that the unit\ntests on, we must mock ",[29,162,35],{}," module before importing ",[29,165,31],{}," in our\nunit test file.",[38,168,170],{"className":40,"code":169,"language":42,"meta":43,"style":43},"# test_time_logger.py\n\nimport unittest\n\nfrom unittest.mock import MagicMock\n\nsys.modules['utime'] = MagicMock()\nfrom time_logger import TimeLogger\n",[29,171,172,177,181,189,193,206,210,227],{"__ignoreMap":43},[47,173,174],{"class":49,"line":50},[47,175,176],{"class":53},"# test_time_logger.py\n",[47,178,179],{"class":49,"line":57},[47,180,61],{"emptyLinePlaceholder":60},[47,182,183,186],{"class":49,"line":64},[47,184,185],{"class":67},"import",[47,187,188],{"class":75}," unittest\n",[47,190,191],{"class":49,"line":86},[47,192,61],{"emptyLinePlaceholder":60},[47,194,195,198,201,203],{"class":49,"line":91},[47,196,197],{"class":67},"from",[47,199,200],{"class":75}," unittest.mock ",[47,202,185],{"class":67},[47,204,205],{"class":75}," MagicMock\n",[47,207,208],{"class":49,"line":103},[47,209,61],{"emptyLinePlaceholder":60},[47,211,212,215,218,221,224],{"class":49,"line":110},[47,213,214],{"class":75},"sys.modules[",[47,216,217],{"class":106},"'utime'",[47,219,220],{"class":75},"] ",[47,222,223],{"class":67},"=",[47,225,226],{"class":75}," MagicMock()\n",[47,228,229,231,234,236],{"class":49,"line":116},[47,230,197],{"class":67},[47,232,233],{"class":75}," time_logger ",[47,235,185],{"class":67},[47,237,238],{"class":75}," TimeLogger\n",[10,240,241,242,245,246,249],{},"Then, we can write a test that patches the ",[29,243,244],{},"utime.time"," functionality so that\nit returns a value of our choosing -- in this case, ",[29,247,248],{},"1234",".",[38,251,253],{"className":40,"code":252,"language":42,"meta":43,"style":43},"class TestTimeLogger(unittest.TestCase):\n\n    def test_save_time(self):\n        \"\"\" Verify that the Epoch time is written to file\n        \"\"\"\n        with unittest.mock.patch(\"utime.time\", return_value=1234):\n            t = TimeLogger()\n            t.save_time()\n            with open(\"LAST_KNOWN_TIME\") as f:\n                self.assertEqual(\"1234\", f.read())\n",[29,254,255,274,278,287,292,296,318,328,333,350],{"__ignoreMap":43},[47,256,257,259,262,264,267,269,272],{"class":49,"line":50},[47,258,68],{"class":67},[47,260,261],{"class":71}," TestTimeLogger",[47,263,76],{"class":75},[47,265,266],{"class":71},"unittest",[47,268,249],{"class":75},[47,270,271],{"class":71},"TestCase",[47,273,83],{"class":75},[47,275,276],{"class":49,"line":57},[47,277,61],{"emptyLinePlaceholder":60},[47,279,280,282,285],{"class":49,"line":64},[47,281,94],{"class":67},[47,283,284],{"class":71}," test_save_time",[47,286,100],{"class":75},[47,288,289],{"class":49,"line":86},[47,290,291],{"class":106},"        \"\"\" Verify that the Epoch time is written to file\n",[47,293,294],{"class":49,"line":91},[47,295,113],{"class":106},[47,297,298,300,303,306,308,312,314,316],{"class":49,"line":103},[47,299,119],{"class":67},[47,301,302],{"class":75}," unittest.mock.patch(",[47,304,305],{"class":106},"\"utime.time\"",[47,307,130],{"class":75},[47,309,311],{"class":310},"s9osk","return_value",[47,313,223],{"class":67},[47,315,248],{"class":79},[47,317,83],{"class":75},[47,319,320,323,325],{"class":49,"line":110},[47,321,322],{"class":75},"            t ",[47,324,223],{"class":67},[47,326,327],{"class":75}," TimeLogger()\n",[47,329,330],{"class":49,"line":116},[47,331,332],{"class":75},"            t.save_time()\n",[47,334,335,338,340,342,344,346,348],{"class":49,"line":145},[47,336,337],{"class":67},"            with",[47,339,122],{"class":79},[47,341,76],{"class":75},[47,343,127],{"class":106},[47,345,136],{"class":75},[47,347,139],{"class":67},[47,349,142],{"class":75},[47,351,353,356,359,362],{"class":49,"line":352},10,[47,354,355],{"class":79},"                self",[47,357,358],{"class":75},".assertEqual(",[47,360,361],{"class":106},"\"1234\"",[47,363,364],{"class":75},", f.read())\n",[10,366,367,368,371,372,375,376,378],{},"Now, when the ",[29,369,370],{},"save_time"," method gets the latest time from ",[29,373,374],{},"utime.time()",", the\nvalue will be patched to return ",[29,377,248],{},". That value will be written to a file,\nand our unit test will pass!",[380,381,383],"h2",{"id":382},"references","References",[385,386,387],"ol",{},[388,389,390],"li",{},[391,392,396,398],"a",{"href":393,"rel":394},"https://docs.python.org/3/library/unittest.html",[395],"nofollow",[29,397,266],{}," â€” Unit testing framework",[400,401,402],"style",{},"html pre.shiki code .sAwPA, html code.shiki .sAwPA{--shiki-default:#6A737D}html pre.shiki code .snl16, html code.shiki .snl16{--shiki-default:#F97583}html pre.shiki code .svObZ, html code.shiki .svObZ{--shiki-default:#B392F0}html pre.shiki code .s95oV, html code.shiki .s95oV{--shiki-default:#E1E4E8}html pre.shiki code .sDLfK, html code.shiki .sDLfK{--shiki-default:#79B8FF}html pre.shiki code .sU2Wk, html code.shiki .sU2Wk{--shiki-default:#9ECBFF}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html pre.shiki code .s9osk, html code.shiki .s9osk{--shiki-default:#FFAB70}",{"title":43,"searchDepth":57,"depth":57,"links":404},[405],{"id":382,"depth":57,"text":383},[42,407],"embedded","2020-02-07T00:00:00.000Z","Unit testing code for embedded systems can be challenging. While it's possible\\nto leverage emulators, write side-effect free code, or run tests on the\\nhardware itself, it's often easiest to unit test the code on your personal\\ncomputer with mocked hardware functionality.","md",null,{"draft":413,"excerpt":414},false,{"type":7,"value":415},[416],[10,417,12],{},"/articles/unit-testing-micropython-with-mocks",{"title":5,"description":12},"articles/unit-testing-micropython-with-mocks",[422,423,424,425],"micropython","testing","mocks","tutorial","DvVD83Ab2t1L5LWxkkR779yUFyrPOnBg9rkRxahv00k",1760755810824]