{"_path":"/articles/nuxt-content-rss-feed","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"How To Add an RSS Feed to a Nuxt Website","description":"If you are a user of Nuxt Content and you wish to configure an RSS feed for your website, it's a surprisingly straight forward process! In this article, we will walk through the code changes required to host an RSS feed for both a statically generated, and Universal Nuxt application.","draft":false,"date":"2024-01-06","tags":["nuxt","rss"],"categories":["programming"],"cover_image":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are a user of "},{"type":"element","tag":"a","props":{"href":"https://content.nuxt.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt Content"}]},{"type":"text","value":" and you wish to configure an RSS feed for your website, it's a surprisingly straight forward process! In this article, we will walk through the code changes required to host an RSS feed for both a statically generated, and Universal Nuxt application."}]}]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you are a user of "},{"type":"element","tag":"a","props":{"href":"https://content.nuxt.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt Content"}]},{"type":"text","value":" and you wish to configure an RSS feed for your website, it's a surprisingly straight forward process! In this article, we will walk through the code changes required to host an RSS feed for both a statically generated, and Universal Nuxt application."}]},{"type":"element","tag":"h2","props":{"id":"preface"},"children":[{"type":"text","value":"Preface"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In version 2 of Nuxt, the community module, "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt-community/feed-module","rel":["nofollow"]},"children":[{"type":"text","value":"nuxt-community/feed-module"}]},{"type":"text","value":" was a popular choice for adding an RSS feed to your website. However, there has been an unresolved "},{"type":"element","tag":"a","props":{"href":"https://github.com/nuxt-community/feed-module/issues/106","rel":["nofollow"]},"children":[{"type":"text","value":"open issue"}]},{"type":"text","value":" since April 1st, 2022 to add support for Nuxt v3. Thankfully, implementing this feature without a module is relatively straight forward."}]},{"type":"element","tag":"h2","props":{"id":"instructions"},"children":[{"type":"text","value":"Instructions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First, install the "},{"type":"element","tag":"a","props":{"href":"https://www.npmjs.com/package/feed","rel":["nofollow"]},"children":[{"type":"text","value":"feed"}]},{"type":"text","value":" library into your project:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"npm i -D feed\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -D feed\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, create a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"server/"}]},{"type":"text","value":" folder in your project if it does not already exist, and create a file named "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"server/routes/atom.ts"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here, we will leverage the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"feed"}]},{"type":"text","value":" library and construct an XML representation of our Nuxt content. As you can see, we first define our "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"feed"}]},{"type":"text","value":" with metadata associated with our RSS feed. This will be used by RSS readers to provide context to the end user. Then, we query our Nuxt content with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"serverQueryContent"}]},{"type":"text","value":" and append a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"feed.addItem"}]},{"type":"text","value":" for each article."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"import { serverQueryContent } from '#content/server';\nimport { Feed } from 'feed';\n\nconst BASE_URL = \"https://mywebsite.com\"\nconst AUTHOR_NAME = \"Firstname Lastname\"\n\nexport default defineEventHandler(async (event) => {\n\n    const feed = new Feed({\n      title: \"My Title\",\n      description: \"My Description\",\n      id: BASE_URL,\n      link: BASE_URL,\n      language: \"en\",\n      image: `${BASE_URL}/images/placeholder.png`,\n      favicon: `${BASE_URL}/favicon.ico`,\n      copyright: `All rights reserved ${new Date().getFullYear()}, ${AUTHOR_NAME}`,\n      updated: new Date(),\n      generator: \"Nuxt static site generation + Feed for Node.js\",\n      feedLinks: {\n        atom: `${BASE_URL}/atom`\n      },\n      author: {\n        name: AUTHOR_NAME,\n      }\n    });\n\n    const articles = await serverQueryContent(event).find();\n\n    articles.forEach((article) => {\n      feed.addItem({\n        title: article.title ? article.title : \"Missing Title\",\n        id: article._path,\n        link: `${BASE_URL}${article._path}`,\n        description: article.description,\n        author: [\n          {\n            name: AUTHOR_NAME,\n          },\n        ],\n        date: new Date(article.date),\n        image: article.cover_image ? `${BASE_URL}/${article.cover_image}` : undefined\n      });\n    });\n\n    return feed.atom1();\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { serverQueryContent } from '#content/server';\nimport { Feed } from 'feed';\n\nconst BASE_URL = \"https://mywebsite.com\"\nconst AUTHOR_NAME = \"Firstname Lastname\"\n\nexport default defineEventHandler(async (event) => {\n\n    const feed = new Feed({\n      title: \"My Title\",\n      description: \"My Description\",\n      id: BASE_URL,\n      link: BASE_URL,\n      language: \"en\",\n      image: `${BASE_URL}/images/placeholder.png`,\n      favicon: `${BASE_URL}/favicon.ico`,\n      copyright: `All rights reserved ${new Date().getFullYear()}, ${AUTHOR_NAME}`,\n      updated: new Date(),\n      generator: \"Nuxt static site generation + Feed for Node.js\",\n      feedLinks: {\n        atom: `${BASE_URL}/atom`\n      },\n      author: {\n        name: AUTHOR_NAME,\n      }\n    });\n\n    const articles = await serverQueryContent(event).find();\n\n    articles.forEach((article) => {\n      feed.addItem({\n        title: article.title ? article.title : \"Missing Title\",\n        id: article._path,\n        link: `${BASE_URL}${article._path}`,\n        description: article.description,\n        author: [\n          {\n            name: AUTHOR_NAME,\n          },\n        ],\n        date: new Date(article.date),\n        image: article.cover_image ? `${BASE_URL}/${article.cover_image}` : undefined\n      });\n    });\n\n    return feed.atom1();\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And that's just about it! Except, if you are statically generating your website with the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nuxt generate"}]},{"type":"text","value":" command, you will need to configure this server-side route to be pre-rendered on site generation.  This is as simple as adding a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nitro"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"prerender"}]},{"type":"text","value":" definition in your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":" file, like so:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"nitro: {\n  prerender: {\n    routes: ['/atom']\n  }\n}\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nitro: {\n  prerender: {\n    routes: ['/atom']\n  }\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"bonus"},"children":[{"type":"text","value":"Bonus"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You may also be interested in adding a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"sitemap.xml"}]},{"type":"text","value":" to your website. This can be done in almost an identical fashion!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Install the dependency:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"npm i -D sitemap\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i -D sitemap\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a route at "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"server/routes/sitemap.xml.ts"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"import { serverQueryContent } from '#content/server';\nimport { SitemapStream, streamToPromise } from 'sitemap';\n\nexport default defineEventHandler(async (event) => {\n    const articles = await serverQueryContent(event).find();\n\n    const sitemap = new SitemapStream({ hostname: 'https://my-website.com/' });\n\n    // Add non nuxt content endpoints here\n    sitemap.write({ url: '/' });\n    sitemap.write({ url: '/articles' });\n\n    // Dynamically generate routes for Nuxt markdown content\n    articles.forEach((article) => sitemap.write({ url: article._path, changefreq: 'monthly' }));\n    sitemap.end();\n\n    return (await streamToPromise(sitemap));\n});\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { serverQueryContent } from '#content/server';\nimport { SitemapStream, streamToPromise } from 'sitemap';\n\nexport default defineEventHandler(async (event) => {\n    const articles = await serverQueryContent(event).find();\n\n    const sitemap = new SitemapStream({ hostname: 'https://my-website.com/' });\n\n    // Add non nuxt content endpoints here\n    sitemap.write({ url: '/' });\n    sitemap.write({ url: '/articles' });\n\n    // Dynamically generate routes for Nuxt markdown content\n    articles.forEach((article) => sitemap.write({ url: article._path, changefreq: 'monthly' }));\n    sitemap.end();\n\n    return (await streamToPromise(sitemap));\n});\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And add the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"prerender"}]},{"type":"text","value":" entry in your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"nitro: {\n  prerender: {\n    routes: ['/sitemap.xml', '/atom']\n  }\n}\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nitro: {\n  prerender: {\n    routes: ['/sitemap.xml', '/atom']\n  }\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"preface","depth":2,"text":"Preface"},{"id":"instructions","depth":2,"text":"Instructions"},{"id":"bonus","depth":2,"text":"Bonus"}]}},"_type":"markdown","_id":"content:articles:nuxt-content-rss-feed.md","_source":"content","_file":"articles/nuxt-content-rss-feed.md","_extension":"md"}