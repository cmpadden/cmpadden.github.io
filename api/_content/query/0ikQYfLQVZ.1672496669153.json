{"_path":"/articles/unit-testing-micropython-with-mocks","_dir":"articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Unit Testing in MicroPython with Mocks","description":"Unit testing code for embedded systems can be challenging. While it's possible\nto leverage emulators, write side-effect free code, or run tests on the\nhardware itself, it's often easiest to unit test the code on your personal\ncomputer with mocked hardware functionality.","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unit testing code for embedded systems can be challenging. While it's possible\nto leverage emulators, write side-effect free code, or run tests on the\nhardware itself, it's often easiest to unit test the code on your personal\ncomputer with mocked hardware functionality."}]}]},"date":"2020-02-07","draft":false,"tags":["micropython","testing","mocks","tutorial"],"categories":["python","embedded"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unit testing code for embedded systems can be challenging. While it's possible\nto leverage emulators, write side-effect free code, or run tests on the\nhardware itself, it's often easiest to unit test the code on your personal\ncomputer with mocked hardware functionality."}]},{"type":"element","tag":"h1","props":{"id":"mocking"},"children":[{"type":"text","value":"Mocking"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Mocks allow us to replace the hardware interfacing functionality under-the-hood\nwith predefined results and side-effects. For example, if there is a piece of\nlogic that retrieves values from an accelerometer to get a device's\norientation, it would be possible to mock the returned values of the\naccelerometer -- allowing us to run the unit tests on a device that does not\nhave an accelerometer sensor installed."}]},{"type":"element","tag":"h1","props":{"id":"a-micropython-mocking-example"},"children":[{"type":"text","value":"A MicroPython Mocking Example"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this example, we will be unit testing a module named "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"time_logger"}]},{"type":"text","value":", that\ndepends on the MicroPython library "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"utime"}]},{"type":"text","value":" to log the most recent Epoch time to\na file."}]},{"type":"element","tag":"code","props":{"code":"# time_logger.py\n\nclass TimeLogger(object):\n\n    def save_time(self):\n        \"\"\" Overwrite a file with the most recent Epoch timestamp from `utime`\n        \"\"\"\n        with open(\"LAST_KNOWN_TIME\", \"w+\") as f:\n            f.write(str(utime.time()))\n","language":"python"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# time_logger.py\n\nclass TimeLogger(object):\n\n    def save_time(self):\n        \"\"\" Overwrite a file with the most recent Epoch timestamp from `utime`\n        \"\"\"\n        with open(\"LAST_KNOWN_TIME\", \"w+\") as f:\n            f.write(str(utime.time()))\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First, because the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"utime"}]},{"type":"text","value":" module is not installed on the machine that the unit\ntests on, we must mock "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"utime"}]},{"type":"text","value":" module before importing "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"time_logger"}]},{"type":"text","value":" in our\nunit test file."}]},{"type":"element","tag":"code","props":{"code":"# test_time_logger.py\n\nimport unittest\n\nfrom unittest.mock import MagicMock\n\nsys.modules['utime'] = MagicMock()\nfrom time_logger import TimeLogger\n","language":"python"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# test_time_logger.py\n\nimport unittest\n\nfrom unittest.mock import MagicMock\n\nsys.modules['utime'] = MagicMock()\nfrom time_logger import TimeLogger\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then, we can write a test that patches the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"utime.time"}]},{"type":"text","value":" functionality so that\nit returns a value of our choosing -- in this case, "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"1234"}]},{"type":"text","value":"."}]},{"type":"element","tag":"code","props":{"code":"class TestTimeLogger(unittest.TestCase):\n\n    def test_save_time(self):\n        \"\"\" Verify that the Epoch time is written to file\n        \"\"\"\n        with unittest.mock.patch(\"utime.time\", return_value=1234):\n            t = TimeLogger()\n            t.save_time()\n            with open(\"LAST_KNOWN_TIME\") as f:\n                self.assertEqual(\"1234\", f.read())\n","language":"python"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class TestTimeLogger(unittest.TestCase):\n\n    def test_save_time(self):\n        \"\"\" Verify that the Epoch time is written to file\n        \"\"\"\n        with unittest.mock.patch(\"utime.time\", return_value=1234):\n            t = TimeLogger()\n            t.save_time()\n            with open(\"LAST_KNOWN_TIME\") as f:\n                self.assertEqual(\"1234\", f.read())\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, when the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"save_time"}]},{"type":"text","value":" method gets the latest time from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"utime.time()"}]},{"type":"text","value":", the\nvalue will be patched to return "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"1234"}]},{"type":"text","value":". That value will be written to a file,\nand our unit test will pass!"}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.python.org/3/library/unittest.html","rel":["nofollow"]},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"unittest"}]},{"type":"text","value":" â€” Unit testing framework"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:articles:unit-testing-micropython-with-mocks.md","_source":"content","_file":"articles/unit-testing-micropython-with-mocks.md","_extension":"md"}